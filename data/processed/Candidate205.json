{
  "filename": "Candidate205.docx",
  "filepath": "D:\\Iqrar Workspace\\AI-Resume-Ranker\\data\\raw\\Candidate205.docx",
  "text": "Candidate205\t\t\t    candidate205r.work@gmail.com\t\t\t\t601 651 0507\nOBJECTIVE:  \t\nSeeking a position at your Company where I can maximize my 8+ years\u2019 experience and with business 2 business and business 2 client application using Two-tier, Three-tier and N-tier architecture in domains like Telecom, Finance, E-Commerce etc. A self-starter, quick learner and capable of working independently to achieve deadlines.\nPROFESSIONAL SUMMARY:\nKnowledge on Java 8 features like Stream API and Lambda expressions, Method References, creating resource classes, Fetching documents from DB.\nProficient in Java and J2EE technologies including JSP, JDBC, JPA and JMS.\nExperienced in HTML, XHTML, DHTML, XML, CSS, Angular, JavaScript, jQuery, JSP and Servlets.\nExperienced in developing web applications using Java, Servlets, JSP, JDBC, JNDI and AJAX.\nWorked in MVC architecture with Angular JS and SPRING and Spring AOP.\nExpertise to make SPA\u2019s better using AngularJS directives and filters and integrated with Spring forms.\nExperienced with Front-End frameworks like AJAX, JavaScript, NodeJS and Angular JS.\nWorked on Service Oriented Architecture (SOA) such as Apache Axis web services which use SOAP, REST, and WSDL and exposure to JAXB, JAX-RPC, and JAX-RS & JAX-WS.\nExpertise in design and development of enterprise level spring based web applications using Spring REST, Hibernate, EJB, Struts, Servlets, JSP and JSF for User Interface Applications.\nProficient in Spring AOP, Security, Event Handling, Spring MVC, Spring IOC Container.\nUsed Apache Kafka for integration and Data Processing with Spring and for Multi-Threaded Message Consumption.\nDeveloped and implemented Stand-Alone applications with Spring Micro services and their patterns.\nWorked on Spring Ribbon for load balancing and used fail safe methodology using Circuit Breaker pattern with Hystrix/Dashboard on designing and implementing Micro service applications.\nHands on experience with Netflix cloud and fall-back technologies like Eureka, Hystrix and Ribbon.\nExperienced in AWS Dynamo DB to capture the any modification on DB. \nAdding permissions to AWS SQS to interact with the Queue and involved in writing custom policies.\nExtensive working with Amazon web Services like using Elastic Beanstalk, EC2 and AMI with Linux.\nProficient in SQL, PL/SQL, Stored Procedures and Triggers while dealing with automation on DB.\nExperienced with NoSQL databases like MongoDB and Cassandra on large data platforms.\nProficiency in developing/maintaining using Oracle, MySQL and SQL Server.\nExperienced in web Application servers like Web Logic, JBoss, WebSphere and Tomcat.\nExperience with Docker images, Containers, push/pull with Spring Boot, used Jenkins for CICD.\nExperience in using Jenkins for Continuous Integration and Sonar jobs for java code quality.\nStrongly associated with usage of Selenium and Junit for Unit and System Testing.\nExperience with the Integrated Development Environments like Eclipse, NetBeans, STS and IntelliJ.\nTECHNICAL SKILLS: \nPROFESSIONAL EXPERIENCE: \nResponsibilities:\nInvolved in various phases of Software Development Life Cycle (SDLC) such as requirements gathering, modelling, analysis, design, development, and testing.\nMaintained Interface compatibility and concurrency in the project using Java 8 new features like default, static methods and Concurrency API.\nDeveloped the view-controller components using\u00a0JSPs,\u00a0HTML5,\u00a0CSS3,\u00a0AJAX,\u00a0JavaScript (jQuery).\nImplemented routing logic and navigation from screen to screen and implemented login functionality on the client side in\u00a0AngularJS.\nHands-on experience in developing integration with Elastic search in any of the programming languages like JAVA and Having knowledge of advance reporting using Elastic search and Node JS.\nImplemented\u00a0core\u00a0features of\u00a0AngularJS\u00a0framework such as dependency\u00a0Injection,\u00a0Data-binding,\u00a0Filters, Directives, Templates, Services and Deep Linking Designing. \nWorked on server-side validations, handle actions, events and Encapsulation by implementing React JS.\nInvolved in developing code to convert a REST response in to a JSON and display that using Swagger UI.\nUsed Spring MVC framework for implementing Model-View- Controller (MVC)\u00a0architecture at the Web tier level to isolate each layer of the application so that complexity of integration will be reduced, and maintenance will be very easy.\nUsed Spring AOP for solving crosscutting concerns like keeping logged data and transactions details etc.\nUsed Spring Batch for processing large amount of data like transaction management, job processing, resource management and logging.\nSecured the API's by implementing Oauth2 token based authentication/authorization scheme using spring security.\nDesigned and developed third-party Payment services to Offer Users Convenient Payment Methods based on OAuth Protocol.\nUsed\u00a0Hibernate\u00a0ORM\u00a0framework\u00a0as persistence engine and wrote\u00a0Hibernate\u00a0Queries to automate the mapping between\u00a0Oracle\u00a0database and\u00a0Objects\u00a0in\u00a0Java.\nDeveloped the monolithic application and involved in migrating existing monolithic application in to Micro Service Architecture based RESTful Service and deployments were done on AWS.\nDesigned and developed Micro Services business components using Spring Boot.\nHands on Coding to build REST Micro Services using Spring Cloud, Oracle, XSD, JSON, Spring Config, Cloud Foundry and Jenkins.\nMicro Services were being used as a strategy to gradually replace a core monolithic application while still adding business features.\nImplemented API based gateway for online transactions through which we did provide an integration API Kit to make a call to the gateway, to capture credit card details.\nResponsible for creating an instance on Amazon EC2 (AWS) and deployed the application on it.\nStrong knowledge on Virtualization, Cloud Computing and Web services. Performed configuration, deployment and support of cloud services including Amazon Web Services (AWS). \nKnowledge of using Amazon Cloud Watch to monitor the application performance and used the logs to identify any threshold limits.\nWorked on AWS services to deploy static websites and dynamic Web Apps on EC2 using Elastic Beanstalk and Elastic Container Service-Docker.\nWorked on developing Restful endpoints to cache application specific data in in-memory data clusters and exposed them with Restful endpoints. \nImplemented REST based microservices using Spring framework, Eureka (Service discovery mechanism) and Jersey API. Used REST Client and POSTMAN to test the services.\nInvolved in creating EC2 instances and installed required configurations and applications on it and created S3 buckets for storing object level data into it.\nDeveloped APIs to read and publish data from Elasticsearch cluster using native Java Transport client as well as REST client. Worked on Spring Integration with the Elasticsearch.\nWorked on Docker container snapshots, attaching to a running container, removing images, managing director structures and managing container.\nWrote SQL in Data Access Object (DAO) to handle the transactions and data persistency in the back-end.\nInvolved in writing SQL and Stored Procedures for handling complex queries with help of TOAD and access them through Java Programs from Oracle Database and MySQL.\nConfigured Apache Tomcat Server and deployed the web components on the STS IDE. \nWorked on setting up Maven scripts to build, package, and deploy application code to the target Tomcat Application Servers and worked on continuous integration servers like Jenkins.\nFocused on\u00a0Test\u00a0Driven\u00a0Development\u00a0there by creating detailed\u00a0JUnit\u00a0tests for every single piece of functionality before writing the functionality.\nWorked on Log4J to validate functionalities and JUnit for unit testing.\nPerformed automation testing and authored test scripts using Selenium\u00a0Web Driver, Selenium Grid\u00a0and Junit.\nActively involved in architecture of DevOps platform and cloud solutions.\nWorked in Agile TDD environment using SDLC tools like GIT, Jira, Jenkins, Maven for build packaging and deployments of the application components.\nEnvironment:\u00a0Agile, Java/J2EE, AngularJS, NodeJS, HTML5, CSS3, JSP, AJAX, JavaScript, JSON, Swagger, Spring MVC, Spring Security, Spring Boot, Spring Batch, Microservices, AWS, EC2, Elasticsearch, Eureka, Oracle, MySQL, Tomcat, Maven, Jenkins, DevOps, Docker, Jira, Git, STS and Log4J.\nResponsibilities: \nWorked in a highly dynamic AGILE environment and participated in Scrum and Sprint meetings.\nUsed Java 8 Lambda expressions along with Streams for creating internal iteration and performing chain operations such as Filter, Map, Collect on a Collection Objects.\nDeveloped an attractive GUI using AngularJS that users can interact dynamically at runtime.\nDeveloped custom directives, Factories and Services in AngularJS and implemented code according to coding standards and created AngularJS Controller to isolate the scopes to perform operations and extensively used\u00a0Core\u00a0Java\u00a0such as Exceptions, and Collections.\u00a0\nDeveloped an application were involved in design changes using HTML5, CSS3 and fraction of JavaScript.\nWorked extensively to achieve DOM Show, hide elements and Event Handling using Angular JS.\nExperienced on Spring framework applications like Spring Core, Spring AOP, Spring MVC, Spring Batch, Spring Security and Spring Boot and did integration to Micro\u00a0services\u00a0into existing system architecture.\nCreating REST based Web Services by establishing links using Hateoas from spring based Applications.\nExperienced in implementing Micro\u00a0services,\u00a0Service\u00a0Oriented Architecture (SOA) with XML based Web\u00a0Services\u00a0(SOAP/UDDI/WSDL) using Top Down and Bottom Up approach.\u00a0\nInvolved in writing application level code to interact with APIs, Web Services using JSON.\nJSON being light in nature was used as the chief source of communication between the server and application.\nExperience in creating\u00a0RESTful\u00a0web\u00a0services\u00a0using Jersey,\u00a0Spring\u00a0framework and JAX-RS.\nWorked with Docker to deploy Micro-services in modern containers to increase Isolation.\nInvolved in developing APIs and REST\t API proxy using APIGEE edge and for sending mobile notifications.\nExperienced with cloud services like Cloud Foundry and AWS.\nDeveloped the Web Services Client using REST, RSDL for verifying the new customer history to a connection. \nUsed Apache Kafka for integration and Data Processing with spring and for Multi-Threaded Message Consumption and worked on Zookeeper to maintain services.\nWorked with Spring Ribbon and Kafka broker service to handle heavy traffic.\nWorked on integrated Hystrix dashboard to monitor spring micro-services using Circuit Breaker.\nUsed Apache Camel routes to build customized routes and Spring XML and Camel blueprint to integrate with other Enterprise applications. \nUsed Apache Camel to integrate the different applications using protocols like ActiveMQ and JMS.\nWorked with AWS cloud service in creating EC2 instances and providing them roles and sometimes participated in writing custom policies and deployed applications on Elastic Bean Stalk and EC2.\nPerformed Query operations on AWS Dynamo DB and captured the modification data on Dynamo DB.\nInvolved in AWS SQS to interact with queue and giving roles to it and involved in writing Custom policies.\nWriting Queries to get the information from MongoDB for adjusting the data in DB.\nWorked on business logic and calculations, performs analysis, handles data transfers, and generates XSL for presentation layer and SQL commands for database layer. \nInvolved in the development of distributed Server-side components and deployed the various Session and Entity Bean Components in the IBM WebSphere Application Server.\nUsed MAVEN as a Build Process and used generating Documentation, Reporting, and adding Dependencies.\nUsed Selenium Grid to execute Selenium automation suites on different platforms.\nUsing JUnit test in Eclipse, developed Unit test cases and test suite. Curl was also implemented to test.\nWorked in various DevOps tools like Jenkins, Puppet, SVN, GIT, and Ansible Well knowledge in CI (Continuous Integration) and CD (Continuous Deployment) methodologies with Jenkins.\nUsed Jenkins as the integration tool and improved Scalability of applications on Cross-Platforms.\nProvided the Production Support for different application and took part in the enhancements of the application and suggested the required changes as per the requirements.\nConfigured and customized logs using Log4J.\nInvolved in System Testing, Integration Testing, and Production Testing on WebSphere Server.\nEnvironment: Agile, Java, J2EE, JSON, AngularJS, Web Services, Spring Batch, Spring Boot, Spring MVC, AWS, RESTful, Eclipse, MAVEN, JUnit, APIGEE, DevOps, Jenkins, IBM WebSphere Server, MongoDB, JMS, Zookeeper, Apache Camel, Kafka, Hystrix, CICD, GIT, PL/SQL, Docker and Log4J.\n\u00a0Responsibilities: \nResponsible for all stages of design, development, and deployment of applications. Active role in Test Driven Development termed as TDD apart from Agile Software Development.\nDefined and constructed layers, server-side objects and client-side interfaces based on J2EE design patterns.\nDeveloped and implemented\u00a0Swing, spring and J2EE based MVC framework for the application.\u00a0\nUsed multithreading in programming to improve overall performance.\nDesigned, analyzed and developed the front-end and back-end Servlets, Bootstrap for designing, HTML5, CSS3, Angular JS and AJAX, for developing presentation layer.\nInvolved in payment status report for asynchronous exchange of information using JMS.\u00a0\nUsed JavaScript, jQuery for user interactions in pages. Creating a responsive web application integrating Twitter Bootstrap\u00a0with\u00a0Angular\u00a0JS and media queries and Used JSF (Java Server Faces) to implement component based User Interface Applications.\nUsed spring framework including spring core/IoC, Spring Web, Spring\u00a0Security.\u00a0\nUsed Spring AOP for reporting and used a Test-Driven approach to development leveraging.\nDeveloped SOAP based JAX-WS Web Service interfaces for integrating multiple systems, code re-usability.\nUsed Dependency Injection feature for wiring and defined dependencies using constructor arguments.\nImplementation of data access layer has been cumbersome for a while and this was greatly resolved using Spring JPA through implementation of data access layers there by reducing boiler-plate-code.\nConfigured hibernate with Spring ORM as part of spring and Hibernate Integration for best results.\nUsed Spring MVC components to implement business layer and Spring Boot for Micro-services.\u00a0\nUtilized spring core, AOP and\u00a0security\u00a0to build robust business operations with transactional support.\u00a0\nWorked on\u00a0Rest\u00a0Web services for backend services used Oracle for database services and RESTful web services using Jersey for JAX-RS implementation.\u00a0\nCRUD was used as part of servlets where DML operations were required on RDBMS like SQL DB\u2019s.\nCreated Hibernate persistent and configuration files for ORM implementation.\nUsed Tomcat Server as the chief enterprise level server while dealing the database activities with hibernates.\nUsed\u00a0Git\u00a0as Version Control System for the application.\u00a0Used\u00a0JMeter\u00a0to test performance of SOAP protocol.\nDeveloped unit and integration tests for existing\u00a0microservices\u00a0using Junit and Mockito environments.\nDeveloped the data access classes using JDBC and log4j for logging and SVN for version control.\nWorked with and implemented on developing and maintaining robust and effective Page Object Model Design Pattern and Created Keyword-Driven and Data-Driven Framework using Selenium WebDriver configured under TestNG environment and used MAVEN for adding dependencies.\nParticipated in Defect tracking team using ALM Quality Center for Defect tracking, Defect priority and status.\nGUI design and development using\u00a0Java\u00a0Swing, JFC\u00a0Used for open source web testing.\nMaintaining production critical servers running UNIX/Linux supporting database and Web services.\nEnvironment: TDD, Java,\u00a0J2EE, jQuery, AJAX, JavaScript, HTML, CSS, Spring, Hibernate, SOAP/Rest, Web Services, Sonar, JAX-WS, JAX-RS, JMS, Oracle, Tomcat, JUnit, UNIX/Linux, Maven, Git and Log4J.\nResponsibilities:\nInvolved in System Analysis and Design methodology as well as Object Oriented Design and development using OOAD methodology to capture and model business requirements.\nInvolved in\u00a0Java Multithreading\u00a0to cascade multiple changes on multiple records in only one transaction\nResponsible for JAVA, J2EE, JSF, JBPM, EL and Java FX coding / development.\nDeveloped HTML and JavaScript. Developed Scripts for\u00a0UNIX\u00a0platform deployment.\nUsing Struts Framework developed and implemented the web-based application following the\u00a0MVC.\nUsed Multithreading\u00a0to\u00a0improve performance in generating the reports in Java.\nUsed\u00a0Spring\u00a0MVC as Web module, involved in design, development of new Action classes to interact with business logic and Used\u00a0Hibernate\u00a0as ORM to map\u00a0Java\u00a0classes to data base tables.\nImplemented J2EE patterns,\u00a0Data Access Object (DAO), Session facade, Business Delegate and Value Object.\nImplemented the service layer using Spring with transaction and logging interceptors.\nFixing the bugs and developing new enhancements using JAVA/J2EE, spring, Hibernate, WebLogic.\nUsed Spring framework for middle tier and Spring-hibernate for data access.\nUsed Twitter Bootstrap to create responsive web pages which can be displayed properly in different screen sizes.\nImplemented SOA to develop REST Based Web services using Apache Axis. \nExtensively developed User defined Custom JSP tags to separate presentation from application logic.\nDesigned and developed\u00a0Web Services (SOAP, WSDL).\u00a0Created and compiled\u00a0XML Schema\u00a0to generate\u00a0Java Bean\u00a0classes using\u00a0Apache Axis.\nDeveloped stored procedures, triggers in MySQL for lowering traffic between servers & clients.\nInstallation, Configuration & administration of WebLogic application Server.\nUsed\u00a0Log4J\u00a0for logging and tracing the messages.\nImplemented Test Scripts based on the User Requirements as specified by the Business side and Requirement document and analysing Business Requirements and handling it as per Requirements. \nProject coordination with other Development teams, System managers and web master and developed good working environment and Production Support as well.\nEnvironment:\u00a0Java, JSP, Servlets, JSF, Spring AOP/IOC, Spring MVC, Hibernate, XML, JBPM, HTML, JDBC, Web Services (SOAP/WSDL and REST), MySQL, Web Logic Server, Junit, Maven, Log4J, SVN and UNIX.\nResponsibilities:\nExtensive use of core Java Collections, Generics, Exception Handling, and Design Patterns for functionality Involved in writing different Design Patterns like Filter, Action, Business Delegate, Service Locater, Data Transfer Objects (DTOs) and Data Access Objects (DAOs). \nUsed Hibernate in persistence layer and developed POJO's, Data Access Object to handle database operations.\nExpertise in developing reusable and interoperable Web service modules based on\u00a0microservices, SOA architecture using SOAP and RESTful and Preparation of Java and JSP coding standard checklist. \nInvolved in the development of Servlet, Struts Action classes, Business Objects, Web Services.\nInvolved in writing JUnit Test Cases and Ant Build Script. \nInvolved in writing JSP using Bean, Logic, HTML, and Iterate Tags. \nWSDL has been used to expose the Web Services. \nSOAP has been used as a protocol to Communicate in the form of XML messages.\nDeveloped client request validations and processing using JavaScript and HTML.\nUsed Hibernate Transaction Management, Hibernate Batch Transactions, and Hibernate cache concepts.\nImplementing or exposing the Micro services to base on RESTful API utilizing Spring Boot with Spring MVC.\nDeveloped Struts Action Forms, Action classes and performed action mapping using Struts. \nHands-on Experience on Selenium Web Driver to write user stories. \nUsed MAVEN as a build tool in adding dependences with PAGE OBJECT MODEL design pattern.\nEnvironment:\u00a0Java, JSP, HTML, CSS, Servlets, XML, SOAP, WSDL, Oracle, Eclipse, JAX-R, JAX-WS, PL/SQL, WebSphere Server, Struts, DAO, Spring AOP, Spring MVC, Hibernate, Junit and Maven.\nResponsibilities:\nCreated user-friendly GUI interface and Web pages using HTML, CSS and JSP.\nDeveloped web application using Struts, JSP, Servlet, Java beans that uses MVC design pattern.\nWrote JavaScript for client-side validation.\nWrote SQL for JDBC prepared statements to retrieve the data from database.\nConfigured Bean mappings within the framework and Hibernate persistence.\nMonitored the logs using Log4j and fixed the problem.\nThe application was deployed on the Tomcat.\nUsed CVS as version control system. \nKnowledge on bug fixing and Production Support.\nEnvironment: J2EE, JDBC, Struts, Hibernate, JavaScript, HTML, CSS, JSP, Servlet, Tomcat, Oracle, Eclipse IDE, CVS and Log4j.\nResponsibilities:\nDesign and Development of the Object-Oriented applications using OOA and OOD techniques in all Business\nAreas using CVS.\nDesigned and developed web pages using HTML, CSS and JSP.\nWrote Client-side validation scripts using JavaScript.\nStored data in Oracle database and accessed using Oracle JDBC drivers.\nImported Client data into the database from XML file by using the XML Parser.\nWorked on bug fixing and Production Support.\nEnvironment: JDK, Servlets, JSP, JDBC, SQL, HTML, JavaScript, Eclipse, XML and CVS.",
  "size_bytes": 53644,
  "num_pages": null,
  "extracted_at": "2025-09-10T18:15:42.121886",
  "clean_text": "objective seek position company maximize year experience business business business client application tier tier n tier architecture domain like telecom finance e commerce etc self starter quick learner capable work independently achieve deadline professional summary knowledge java feature like stream api lambda expression method references create resource class fetch document db proficient java technology include jsp jdbc jpa jms experience html xhtml dhtml xml css angular javascript jquery jsp servlets experience develop web application java servlets jsp jdbc jndi ajax work mvc architecture angular js spring spring aop expertise spa well angularjs directive filter integrate spring form experience end framework like ajax javascript nodejs angular js work service oriented architecture soa apache axis web service use soap rest wsdl exposure jaxb jax rpc jax rs jax ws expertise design development enterprise level spring base web application spring rest hibernate ejb struts servlets jsp jsf user interface applications proficient spring aop security event handling spring mvc spring ioc container apache kafka integration data processing spring multi thread message consumption develop implement stand application spring micro service pattern work spring ribbon load balancing fail safe methodology circuit breaker pattern hystrix dashboard design implement micro service application hand experience netflix cloud fall technology like eureka hystrix ribbon experience aws dynamo db capture modification db add permission aws sqs interact queue involve write custom policy extensive work amazon web services like elastic beanstalk ami linux proficient sql pl sql stored procedures triggers deal automation db experience nosql database like mongodb cassandra large datum platform proficiency develop maintaining oracle mysql sql server experience web application server like web logic jboss websphere tomcat experience docker image containers push pull spring boot jenkins cicd experience jenkins continuous integration sonar job java code quality strongly associate usage selenium junit unit system testing experience integrated development environments like eclipse netbeans sts technical skill professional experience responsibility involve phase software development life cycle sdlc requirement gathering modelling analysis design development testing maintain interface compatibility concurrency project java new feature like default static method concurrency api develop view controller component jsp ajax javascript jquery implement route logic navigation screen screen implement login functionality client angularjs hand experience develop integration elastic search programming language like java have knowledge advance reporting elastic search node js implement core feature angularjs framework dependency injection data bind filters directives templates services deep linking designing work server validation handle action event encapsulation implement react js involve develop code convert rest response json display swagger ui spring mvc framework implement model controller mvc architecture web tier level isolate layer application complexity integration reduce maintenance easy spring aop solve crosscut concern like keep log datum transaction detail etc spring batch process large datum like transaction management job processing resource management logging secure api implement token base authentication authorization scheme spring security design develop party payment service offer users convenient payment methods base oauth protocol hibernate orm framework persistence engine write hibernate queries automate mapping oracle database object java develop monolithic application involve migrate exist monolithic application micro service architecture base restful service deployment aws design develop micro services business component spring boot hand coding build rest micro services spring cloud oracle xsd json spring config cloud foundry jenkins micro services strategy gradually replace core monolithic application add business feature implement api base gateway online transaction provide integration api kit gateway capture credit card detail responsible create instance amazon aws deploy application strong knowledge virtualization cloud computing web service perform configuration deployment support cloud service include amazon web services aws knowledge amazon cloud watch monitor application performance log identify threshold limit work aws service deploy static website dynamic web apps elastic beanstalk elastic container service docker work develop restful endpoint cache application specific datum memory datum cluster expose restful endpoint implement rest base microservice spring framework eureka service discovery mechanism jersey api rest client postman test service involve create instance instal require configuration application create bucket store object level datum develop api read publish datum elasticsearch cluster native java transport client rest client work spring integration elasticsearch work docker container snapshot attach run container remove image manage director structure manage container write sql data access object dao handle transaction datum persistency end involve write sql store procedures handle complex query help toad access java programs oracle database mysql configure apache tomcat server deploy web component sts ide work set maven script build package deploy application code target tomcat application servers work continuous integration server like jenkins focus test driven development create detailed junit test single piece functionality write functionality work validate functionality junit unit testing performed automation testing author test script selenium web driver selenium grid junit actively involve architecture devops platform cloud solution work agile tdd environment sdlc tool like git jira jenkins maven build packaging deployment application component environment agile java angularj nodejs jsp ajax javascript json swagger spring mvc spring security spring boot spring batch microservices aws elasticsearch eureka oracle mysql tomcat maven jenkins devops docker jira git sts responsibility work highly dynamic agile environment participate scrum sprint meeting java lambda expression streams create internal iteration perform chain operation filter map collect collection objects develop attractive gui angularjs user interact dynamically runtime develop custom directive factories services angularjs implement code accord code standard create angularjs controller isolate scope perform operation extensively core java exception collection develop application involve design change fraction javascript work extensively achieve dom hide element event handling angular js experience spring framework application like spring core spring aop spring mvc spring batch spring security spring boot integration micro service exist system architecture create rest base web services establish link hateoas spring base applications experience implement micro service service oriented architecture soa xml base web services soap uddi wsdl approach involve write application level code interact api web services json json light nature chief source communication server application experience create restful web service jersey spring framework jax rs work docker deploy micro service modern container increase isolation involve develop api rest api proxy apigee edge send mobile notification experience cloud service like cloud foundry aws develop web services client rest rsdl verify new customer history connection apache kafka integration data processing spring multi thread message consumption work zookeeper maintain service work spring ribbon kafka broker service handle heavy traffic work integrate hystrix dashboard monitor spring micro service circuit breaker apache camel route build customize route spring xml camel blueprint integrate enterprise application apache camel integrate different application protocol like activemq jms work aws cloud service create instance provide role participate write custom policy deploy application elastic bean stalk performed query operation aws dynamo db capture modification datum dynamo db involve aws sqs interact queue give role involve write custom policy write query information mongodb adjust datum db work business logic calculation perform analysis handle datum transfer generate xsl presentation layer sql command database layer involve development distribute server component deploy session entity bean components ibm websphere application server maven build process generate documentation reporting add dependency selenium grid execute selenium automation suite different platform junit test eclipse developed unit test case test suite curl implement test work devops tool like jenkins puppet svn git ansible knowledge ci continuous integration cd continuous deployment methodology jenkins jenkins integration tool improve scalability application cross platforms provide production support different application take enhancement application suggest require change requirement configured customize log involve system testing integration testing production testing websphere server environment agile java json angularjs web services spring batch spring boot spring mvc aws restful eclipse maven junit apigee devops jenkins ibm websphere server mongodb jms zookeeper apache camel kafka hystrix cicd git pl sql docker responsibility responsible stage design development deployment application active role test driven development term tdd apart agile software development define construct layer server object client interface base design pattern develop implement swing spring base mvc framework application multithreading programming improve overall performance design analyze develop end end servlets bootstrap designing angular js ajax develop presentation layer involve payment status report asynchronous exchange information jms javascript jquery user interaction page create responsive web application integrate twitter bootstrap angular js medium query jsf java server faces implement component base user interface applications spring framework include spring core ioc spring web spring security spring aop report test drive approach development leveraging develop soap base jax ws web service interface integrate multiple system code usability dependency injection feature wiring define dependency constructor argument implementation datum access layer cumbersome greatly resolve spring jpa implementation datum access layer reduce boiler plate code configure hibernate spring orm spring hibernate integration good result spring mvc component implement business layer spring boot micro service utilize spring core aop security build robust business operation transactional support work rest web service backend service oracle database service restful web service jersey jax rs implementation crud servlet dml operation require rdbms like sql db create hibernate persistent configuration file orm implementation tomcat server chief enterprise level server deal database activity hibernate git version control system application jmeter test performance soap protocol develop unit integration test exist microservice junit mockito environment develop data access class jdbc log svn version control work implement develop maintain robust effective page object model design pattern created keyword driven data drive framework selenium webdriver configure testng environment maven add dependency participate defect tracking team alm quality center defect tracking defect priority status gui design development java swing jfc open source web testing maintain production critical server run unix linux support database web service environment tdd java jquery ajax javascript html css spring hibernate soap rest web services sonar jax ws jax rs jms oracle tomcat junit unix linux maven git responsibility involve system analysis design methodology object oriented design development ooad methodology capture model business requirement involve java multithreading cascade multiple change multiple record transaction responsible java jsf jbpm el java fx coding development develop html javascript develop script unix platform deployment struts framework develop implement web base application follow mvc multithreading improve performance generate report java spring mvc web module involve design development new action class interact business logic hibernate orm map java class datum base table implement pattern data access object dao session facade business delegate value object implement service layer spring transaction log interceptor fix bug develop new enhancement java spring hibernate weblogic spring framework middle tier spring hibernate datum access twitter bootstrap create responsive web page display properly different screen size implement soa develop rest base web service apache axis extensively develop user define custom jsp tag separate presentation application logic design develop web services soap wsdl create compile xml schema generate java bean class apache axis develop store procedure trigger mysql lower traffic server client installation configuration administration weblogic application server log trace message implement test scripts base user requirements specify business requirement document analyse business requirements handle requirements project coordination development team system manager web master develop good work environment production support environment java jsp servlets jsf spring aop ioc spring mvc hibernate xml jbpm html jdbc web services soap wsdl rest mysql web logic server junit maven svn unix responsibility extensive use core java collections generics exception handling design patterns functionality involve write different design patterns like filter action business delegate service locater data transfer objects dto data access objects dao hibernate persistence layer develop pojo data access object handle database operation expertise develop reusable interoperable web service module base microservice soa architecture soap restful preparation java jsp code standard checklist involve development servlet struts action class business objects web services involve write junit test case ant build script involve write jsp bean logic html iterate tags wsdl expose web services soap protocol communicate form xml message develop client request validation processing javascript html hibernate transaction management hibernate batch transactions hibernate cache concept implement expose micro service base restful api utilize spring boot spring mvc develop struts action forms action class perform action mapping strut hand experience selenium web driver write user story maven build tool add dependence page object model design pattern environment java jsp html css servlets xml soap wsdl oracle eclipse jax r jax ws pl sql websphere server struts dao spring aop spring mvc hibernate junit maven responsibility create user friendly gui interface web page html css jsp develop web application struts jsp servlet java bean use mvc design pattern wrote javascript client validation write sql jdbc prepare statement retrieve datum database configure bean mapping framework hibernate persistence monitor log fix problem application deploy tomcat cvs version control system knowledge bug fixing production support environment jdbc struts hibernate javascript html css jsp servlet tomcat oracle eclipse ide cvs responsibility design development object orient application ooa ood technique business areas cvs design develop web page html css jsp wrote client validation script javascript store datum oracle database access oracle jdbc driver import client datum database xml file xml parser work bug fixing production support environment jdk servlets jsp jdbc sql html javascript eclipse xml cvs"
}